import { observeOn } from 'rxjs/operators';
import { Observable, queueScheduler, observable, } from 'rxjs';
export function fromPromise(promiseFn) {
    return new Observable((subscriber) => {
        promiseFn().then((result) => {
            if (!subscriber.closed) {
                subscriber.next(result);
                subscriber.complete();
            }
        }, (error) => {
            if (!subscriber.closed) {
                subscriber.error(error);
            }
        });
        return () => subscriber.unsubscribe();
    });
}
export class ZoneScheduler {
    constructor(zone) {
        this.zone = zone;
        this.now = Date.now ? Date.now : () => +new Date();
    }
    schedule(work, delay = 0, state) {
        return this.zone.run(() => queueScheduler.schedule(work, delay, state));
    }
}
export function fixObservable(obs) {
    obs[observable] = () => obs;
    return obs;
}
export function wrapWithZone(obs, ngZone) {
    return obs.pipe(observeOn(new ZoneScheduler(ngZone)));
}
export function pickFlag(flags, flag, defaultValue) {
    return flags && typeof flags[flag] !== 'undefined'
        ? flags[flag]
        : defaultValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2thbWlsa2lzaWVsYS9SZXBvL2thbWlsa2lzaWVsYS9hcG9sbG8tYW5ndWxhci9wYWNrYWdlcy9hcG9sbG8tYW5ndWxhci9zcmMvIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFNekMsT0FBTyxFQUNMLFVBQVUsRUFFVixjQUFjLEVBR2QsVUFBVSxHQUNYLE1BQU0sTUFBTSxDQUFDO0FBRWQsTUFBTSxVQUFVLFdBQVcsQ0FBSSxTQUEyQjtJQUN4RCxPQUFPLElBQUksVUFBVSxDQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7UUFDdEMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUNkLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDVCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtnQkFDdEIsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDeEIsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQ3ZCO1FBQ0gsQ0FBQyxFQUNELENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDUixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtnQkFDdEIsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6QjtRQUNILENBQUMsQ0FDRixDQUFDO1FBRUYsT0FBTyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDeEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxPQUFPLGFBQWE7SUFDeEIsWUFBb0IsSUFBWTtRQUFaLFNBQUksR0FBSixJQUFJLENBQVE7UUFFekIsUUFBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUZsQixDQUFDO0lBSTdCLFFBQVEsQ0FDYixJQUFtRCxFQUNuRCxRQUFnQixDQUFDLEVBQ2pCLEtBQVM7UUFFVCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUN4QixjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQzVCLENBQUM7SUFDcEIsQ0FBQztDQUNGO0FBU0QsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsR0FBd0M7SUFFdkMsR0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztJQUNyQyxPQUFPLEdBQVUsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FDMUIsR0FBa0IsRUFDbEIsTUFBYztJQUVkLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUN0QixLQUF5QixFQUN6QixJQUFPLEVBQ1AsWUFBdUI7SUFFdkIsT0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssV0FBVztRQUNoRCxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztRQUNiLENBQUMsQ0FBQyxZQUFZLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Tmdab25lfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7b2JzZXJ2ZU9ufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICBPYnNlcnZhYmxlUXVlcnksXG4gIEFwb2xsb1F1ZXJ5UmVzdWx0LFxuICBPYnNlcnZhYmxlIGFzIEFPYnNlcnZhYmxlLFxufSBmcm9tICdAYXBvbGxvL2NsaWVudC9jb3JlJztcbmltcG9ydCB7XG4gIE9ic2VydmFibGUsXG4gIFN1YnNjcmlwdGlvbixcbiAgcXVldWVTY2hlZHVsZXIsXG4gIFNjaGVkdWxlckxpa2UsXG4gIFNjaGVkdWxlckFjdGlvbixcbiAgb2JzZXJ2YWJsZSxcbn0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUHJvbWlzZTxUPihwcm9taXNlRm46ICgpID0+IFByb21pc2U8VD4pOiBPYnNlcnZhYmxlPFQ+IHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPFQ+KChzdWJzY3JpYmVyKSA9PiB7XG4gICAgcHJvbWlzZUZuKCkudGhlbihcbiAgICAgIChyZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQpO1xuICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgKTtcblxuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gIH0pO1xufVxuXG5leHBvcnQgY2xhc3MgWm9uZVNjaGVkdWxlciBpbXBsZW1lbnRzIFNjaGVkdWxlckxpa2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHpvbmU6IE5nWm9uZSkge31cblxuICBwdWJsaWMgbm93ID0gRGF0ZS5ub3cgPyBEYXRlLm5vdyA6ICgpID0+ICtuZXcgRGF0ZSgpO1xuXG4gIHB1YmxpYyBzY2hlZHVsZTxUPihcbiAgICB3b3JrOiAodGhpczogU2NoZWR1bGVyQWN0aW9uPFQ+LCBzdGF0ZT86IFQpID0+IHZvaWQsXG4gICAgZGVsYXk6IG51bWJlciA9IDAsXG4gICAgc3RhdGU/OiBULFxuICApOiBTdWJzY3JpcHRpb24ge1xuICAgIHJldHVybiB0aGlzLnpvbmUucnVuKCgpID0+XG4gICAgICBxdWV1ZVNjaGVkdWxlci5zY2hlZHVsZSh3b3JrLCBkZWxheSwgc3RhdGUpLFxuICAgICkgYXMgU3Vic2NyaXB0aW9uO1xuICB9XG59XG5cbi8vIFhYWDogQXBvbGxvJ3MgUXVlcnlPYnNlcnZhYmxlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggUnhKU1xuLy8gVE9ETzogcmVtb3ZlIGl0IGluIG9uZSBvZiBmdXR1cmUgcmVsZWFzZXNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdGl2ZVgvcnhqcy9ibG9iLzlmYjBjZTllMDljODY1OTIwY2YzNzkxNWNjNjc1ZTNiM2E3NTA1MGIvc3JjL2ludGVybmFsL3V0aWwvc3Vic2NyaWJlVG8udHMjTDMyXG5leHBvcnQgZnVuY3Rpb24gZml4T2JzZXJ2YWJsZTxUPihcbiAgb2JzOiBPYnNlcnZhYmxlUXVlcnk8VD4sXG4pOiBPYnNlcnZhYmxlPEFwb2xsb1F1ZXJ5UmVzdWx0PFQ+PjtcbmV4cG9ydCBmdW5jdGlvbiBmaXhPYnNlcnZhYmxlPFQ+KG9iczogQU9ic2VydmFibGU8VD4pOiBPYnNlcnZhYmxlPFQ+O1xuZXhwb3J0IGZ1bmN0aW9uIGZpeE9ic2VydmFibGU8VD4oXG4gIG9iczogQU9ic2VydmFibGU8VD4gfCBPYnNlcnZhYmxlUXVlcnk8VD4sXG4pOiBPYnNlcnZhYmxlPEFwb2xsb1F1ZXJ5UmVzdWx0PFQ+PiB8IE9ic2VydmFibGU8VD4ge1xuICAob2JzIGFzIGFueSlbb2JzZXJ2YWJsZV0gPSAoKSA9PiBvYnM7XG4gIHJldHVybiBvYnMgYXMgYW55O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcFdpdGhab25lPFQ+KFxuICBvYnM6IE9ic2VydmFibGU8VD4sXG4gIG5nWm9uZTogTmdab25lLFxuKTogT2JzZXJ2YWJsZTxUPiB7XG4gIHJldHVybiBvYnMucGlwZShvYnNlcnZlT24obmV3IFpvbmVTY2hlZHVsZXIobmdab25lKSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGlja0ZsYWc8VEZsYWdzLCBLIGV4dGVuZHMga2V5b2YgVEZsYWdzPihcbiAgZmxhZ3M6IFRGbGFncyB8IHVuZGVmaW5lZCxcbiAgZmxhZzogSyxcbiAgZGVmYXVsdFZhbHVlOiBURmxhZ3NbS10sXG4pOiBURmxhZ3NbS10ge1xuICByZXR1cm4gZmxhZ3MgJiYgdHlwZW9mIGZsYWdzW2ZsYWddICE9PSAndW5kZWZpbmVkJ1xuICAgID8gZmxhZ3NbZmxhZ11cbiAgICA6IGRlZmF1bHRWYWx1ZTtcbn1cbiJdfQ==