import { ApolloError, } from '@apollo/client/core';
const isApolloError = (err) => err && err.hasOwnProperty('graphQLErrors');
const ɵ0 = isApolloError;
export class TestOperation {
    constructor(operation, observer) {
        this.operation = operation;
        this.observer = observer;
    }
    flush(result) {
        if (isApolloError(result)) {
            this.observer.error(result);
        }
        else {
            const fetchResult = result ? Object.assign({}, result) : result;
            this.observer.next(fetchResult);
            this.observer.complete();
        }
    }
    flushData(data) {
        this.flush({
            data,
        });
    }
    networkError(error) {
        const apolloError = new ApolloError({
            networkError: error,
        });
        this.flush(apolloError);
    }
    graphqlErrors(errors) {
        this.flush({
            errors,
        });
    }
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9rYW1pbGtpc2llbGEvUmVwby9rYW1pbGtpc2llbGEvYXBvbGxvLWFuZ3VsYXIvcGFja2FnZXMvYXBvbGxvLWFuZ3VsYXIvdGVzdGluZy9zcmMvIiwic291cmNlcyI6WyJvcGVyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFdBQVcsR0FHWixNQUFNLHFCQUFxQixDQUFDO0FBSTdCLE1BQU0sYUFBYSxHQUFHLENBQUMsR0FBUSxFQUFzQixFQUFFLENBQ3JELEdBQUcsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDOztBQU03QyxNQUFNLE9BQU8sYUFBYTtJQUN4QixZQUNTLFNBQW9CLEVBQ25CLFFBQWtDO1FBRG5DLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDbkIsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7SUFDekMsQ0FBQztJQUVHLEtBQUssQ0FBQyxNQUFxQztRQUNoRCxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM3QjthQUFNO1lBQ0wsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLENBQUMsbUJBQUssTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDbEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBNkIsQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRU0sU0FBUyxDQUFDLElBQWlDO1FBQ2hELElBQUksQ0FBQyxLQUFLLENBQUM7WUFDVCxJQUFJO1NBQ0wsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLFlBQVksQ0FBQyxLQUFZO1FBQzlCLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDO1lBQ2xDLFlBQVksRUFBRSxLQUFLO1NBQ3BCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVNLGFBQWEsQ0FBQyxNQUFzQjtRQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ1QsTUFBTTtTQUNQLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFwb2xsb0Vycm9yLFxuICBPcGVyYXRpb24gYXMgTGlua09wZXJhdGlvbixcbiAgRmV0Y2hSZXN1bHQsXG59IGZyb20gJ0BhcG9sbG8vY2xpZW50L2NvcmUnO1xuaW1wb3J0IHtHcmFwaFFMRXJyb3IsIEV4ZWN1dGlvblJlc3VsdH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQge09ic2VydmVyfSBmcm9tICdyeGpzJztcblxuY29uc3QgaXNBcG9sbG9FcnJvciA9IChlcnI6IGFueSk6IGVyciBpcyBBcG9sbG9FcnJvciA9PlxuICBlcnIgJiYgZXJyLmhhc093blByb3BlcnR5KCdncmFwaFFMRXJyb3JzJyk7XG5cbmV4cG9ydCB0eXBlIE9wZXJhdGlvbiA9IExpbmtPcGVyYXRpb24gJiB7XG4gIGNsaWVudE5hbWU6IHN0cmluZztcbn07XG5cbmV4cG9ydCBjbGFzcyBUZXN0T3BlcmF0aW9uPFQgPSB7W2tleTogc3RyaW5nXTogYW55fT4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgb3BlcmF0aW9uOiBPcGVyYXRpb24sXG4gICAgcHJpdmF0ZSBvYnNlcnZlcjogT2JzZXJ2ZXI8RmV0Y2hSZXN1bHQ8VD4+LFxuICApIHt9XG5cbiAgcHVibGljIGZsdXNoKHJlc3VsdDogRXhlY3V0aW9uUmVzdWx0IHwgQXBvbGxvRXJyb3IpOiB2b2lkIHtcbiAgICBpZiAoaXNBcG9sbG9FcnJvcihyZXN1bHQpKSB7XG4gICAgICB0aGlzLm9ic2VydmVyLmVycm9yKHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZldGNoUmVzdWx0ID0gcmVzdWx0ID8gey4uLnJlc3VsdH0gOiByZXN1bHQ7XG4gICAgICB0aGlzLm9ic2VydmVyLm5leHQoZmV0Y2hSZXN1bHQgYXMgRmV0Y2hSZXN1bHQ8VD4pO1xuICAgICAgdGhpcy5vYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBmbHVzaERhdGEoZGF0YToge1trZXk6IHN0cmluZ106IGFueX0gfCBudWxsKTogdm9pZCB7XG4gICAgdGhpcy5mbHVzaCh7XG4gICAgICBkYXRhLFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIG5ldHdvcmtFcnJvcihlcnJvcjogRXJyb3IpOiB2b2lkIHtcbiAgICBjb25zdCBhcG9sbG9FcnJvciA9IG5ldyBBcG9sbG9FcnJvcih7XG4gICAgICBuZXR3b3JrRXJyb3I6IGVycm9yLFxuICAgIH0pO1xuXG4gICAgdGhpcy5mbHVzaChhcG9sbG9FcnJvcik7XG4gIH1cblxuICBwdWJsaWMgZ3JhcGhxbEVycm9ycyhlcnJvcnM6IEdyYXBoUUxFcnJvcltdKTogdm9pZCB7XG4gICAgdGhpcy5mbHVzaCh7XG4gICAgICBlcnJvcnMsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==