import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ApolloLink, Observable as LinkObservable, } from '@apollo/client/core';
import { BatchLink } from '@apollo/client/link/batch';
import { print } from 'graphql';
import { createHeadersWithClientAwereness, fetch, mergeHeaders, prioritize, } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
const defaults = {
    batchInterval: 10,
    batchMax: 10,
    uri: 'graphql',
    method: 'POST',
};
export class HttpBatchLinkHandler extends ApolloLink {
    constructor(httpClient, options) {
        super();
        this.httpClient = httpClient;
        this.options = options;
        this.print = print;
        this.batchInterval = options.batchInterval || defaults.batchInterval;
        this.batchMax = options.batchMax || defaults.batchMax;
        if (this.options.operationPrinter) {
            this.print = this.options.operationPrinter;
        }
        const batchHandler = (operations) => {
            return new LinkObservable((observer) => {
                const body = this.createBody(operations);
                const headers = this.createHeaders(operations);
                const { method, uri, withCredentials } = this.createOptions(operations);
                if (typeof uri === 'function') {
                    throw new Error(`Option 'uri' is a function, should be a string`);
                }
                const req = {
                    method,
                    url: uri,
                    body: body,
                    options: {
                        withCredentials,
                        headers,
                    },
                };
                const sub = fetch(req, this.httpClient, () => {
                    throw new Error('File upload is not available when combined with Batching');
                }).subscribe({
                    next: (result) => observer.next(result.body),
                    error: (err) => observer.error(err),
                    complete: () => observer.complete(),
                });
                return () => {
                    if (!sub.closed) {
                        sub.unsubscribe();
                    }
                };
            });
        };
        const batchKey = options.batchKey ||
            ((operation) => {
                return this.createBatchKey(operation);
            });
        this.batcher = new BatchLink({
            batchInterval: this.batchInterval,
            batchMax: this.batchMax,
            batchKey,
            batchHandler,
        });
    }
    createOptions(operations) {
        const context = operations[0].getContext();
        return {
            method: prioritize(context.method, this.options.method, defaults.method),
            uri: prioritize(context.uri, this.options.uri, defaults.uri),
            withCredentials: prioritize(context.withCredentials, this.options.withCredentials),
        };
    }
    createBody(operations) {
        return operations.map((operation) => {
            const includeExtensions = prioritize(operation.getContext().includeExtensions, this.options.includeExtensions, false);
            const includeQuery = prioritize(operation.getContext().includeQuery, this.options.includeQuery, true);
            const body = {
                operationName: operation.operationName,
                variables: operation.variables,
            };
            if (includeExtensions) {
                body.extensions = operation.extensions;
            }
            if (includeQuery) {
                body.query = this.print(operation.query);
            }
            return body;
        });
    }
    createHeaders(operations) {
        var _a, _b;
        return operations.reduce((headers, operation) => {
            return mergeHeaders(headers, operation.getContext().headers);
        }, createHeadersWithClientAwereness({
            headers: this.options.headers,
            clientAwareness: (_b = (_a = operations[0]) === null || _a === void 0 ? void 0 : _a.getContext()) === null || _b === void 0 ? void 0 : _b.clientAwareness,
        }));
    }
    createBatchKey(operation) {
        const context = operation.getContext();
        if (context.skipBatching) {
            return Math.random().toString(36).substr(2, 9);
        }
        const headers = context.headers &&
            context.headers.keys().map((k) => context.headers.get(k));
        const opts = JSON.stringify({
            includeQuery: context.includeQuery,
            includeExtensions: context.includeExtensions,
            headers,
        });
        return prioritize(context.uri, this.options.uri) + opts;
    }
    request(op) {
        return this.batcher.request(op);
    }
}
export class HttpBatchLink {
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    create(options) {
        return new HttpBatchLinkHandler(this.httpClient, options);
    }
}
HttpBatchLink.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpBatchLink_Factory() { return new HttpBatchLink(i0.ɵɵinject(i1.HttpClient)); }, token: HttpBatchLink, providedIn: "root" });
HttpBatchLink.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
HttpBatchLink.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1iYXRjaC1saW5rLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9rYW1pbGtpc2llbGEvUmVwby9rYW1pbGtpc2llbGEvYXBvbGxvLWFuZ3VsYXIvcGFja2FnZXMvYXBvbGxvLWFuZ3VsYXIvaHR0cC9zcmMvIiwic291cmNlcyI6WyJodHRwLWJhdGNoLWxpbmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsVUFBVSxFQUFjLE1BQU0sc0JBQXNCLENBQUM7QUFDN0QsT0FBTyxFQUNMLFVBQVUsRUFDVixVQUFVLElBQUksY0FBYyxHQUc3QixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBQyxTQUFTLEVBQWUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRTlCLE9BQU8sRUFDTCxnQ0FBZ0MsRUFDaEMsS0FBSyxFQUNMLFlBQVksRUFDWixVQUFVLEdBQ1gsTUFBTSxTQUFTLENBQUM7OztBQUlqQixNQUFNLFFBQVEsR0FBRztJQUNmLGFBQWEsRUFBRSxFQUFFO0lBQ2pCLFFBQVEsRUFBRSxFQUFFO0lBQ1osR0FBRyxFQUFFLFNBQVM7SUFDZCxNQUFNLEVBQUUsTUFBTTtDQUNmLENBQUM7QUFFRixNQUFNLE9BQU8sb0JBQXFCLFNBQVEsVUFBVTtJQU1sRCxZQUFvQixVQUFzQixFQUFVLE9BQXFCO1FBQ3ZFLEtBQUssRUFBRSxDQUFDO1FBRFUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQWM7UUFGakUsVUFBSyxHQUFxQixLQUFLLENBQUM7UUFLdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsYUFBYSxJQUFJLFFBQVEsQ0FBQyxhQUFhLENBQUM7UUFDckUsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxR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RixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQWhMTyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SHR0cENsaWVudCwgSHR0cEhlYWRlcnN9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7XG4gIEFwb2xsb0xpbmssXG4gIE9ic2VydmFibGUgYXMgTGlua09ic2VydmFibGUsXG4gIE9wZXJhdGlvbixcbiAgRmV0Y2hSZXN1bHQsXG59IGZyb20gJ0BhcG9sbG8vY2xpZW50L2NvcmUnO1xuaW1wb3J0IHtCYXRjaExpbmssIEJhdGNoSGFuZGxlcn0gZnJvbSAnQGFwb2xsby9jbGllbnQvbGluay9iYXRjaCc7XG5pbXBvcnQge3ByaW50fSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7Qm9keSwgQ29udGV4dCwgUmVxdWVzdCwgT3B0aW9ucywgT3BlcmF0aW9uUHJpbnRlcn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuICBjcmVhdGVIZWFkZXJzV2l0aENsaWVudEF3ZXJlbmVzcyxcbiAgZmV0Y2gsXG4gIG1lcmdlSGVhZGVycyxcbiAgcHJpb3JpdGl6ZSxcbn0gZnJvbSAnLi91dGlscyc7XG5cbmltcG9ydCB7QmF0Y2hPcHRpb25zfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZGVmYXVsdHMgPSB7XG4gIGJhdGNoSW50ZXJ2YWw6IDEwLFxuICBiYXRjaE1heDogMTAsXG4gIHVyaTogJ2dyYXBocWwnLFxuICBtZXRob2Q6ICdQT1NUJyxcbn07XG5cbmV4cG9ydCBjbGFzcyBIdHRwQmF0Y2hMaW5rSGFuZGxlciBleHRlbmRzIEFwb2xsb0xpbmsge1xuICBwdWJsaWMgYmF0Y2hlcjogQXBvbGxvTGluaztcbiAgcHJpdmF0ZSBiYXRjaEludGVydmFsOiBudW1iZXI7XG4gIHByaXZhdGUgYmF0Y2hNYXg6IG51bWJlcjtcbiAgcHJpdmF0ZSBwcmludDogT3BlcmF0aW9uUHJpbnRlciA9IHByaW50O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCwgcHJpdmF0ZSBvcHRpb25zOiBCYXRjaE9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5iYXRjaEludGVydmFsID0gb3B0aW9ucy5iYXRjaEludGVydmFsIHx8IGRlZmF1bHRzLmJhdGNoSW50ZXJ2YWw7XG4gICAgdGhpcy5iYXRjaE1heCA9IG9wdGlvbnMuYmF0Y2hNYXggfHwgZGVmYXVsdHMuYmF0Y2hNYXg7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLm9wZXJhdGlvblByaW50ZXIpIHtcbiAgICAgIHRoaXMucHJpbnQgPSB0aGlzLm9wdGlvbnMub3BlcmF0aW9uUHJpbnRlcjtcbiAgICB9XG5cbiAgICBjb25zdCBiYXRjaEhhbmRsZXI6IEJhdGNoSGFuZGxlciA9IChvcGVyYXRpb25zOiBPcGVyYXRpb25bXSkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBMaW5rT2JzZXJ2YWJsZSgob2JzZXJ2ZXI6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBib2R5ID0gdGhpcy5jcmVhdGVCb2R5KG9wZXJhdGlvbnMpO1xuICAgICAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5jcmVhdGVIZWFkZXJzKG9wZXJhdGlvbnMpO1xuICAgICAgICBjb25zdCB7bWV0aG9kLCB1cmksIHdpdGhDcmVkZW50aWFsc30gPSB0aGlzLmNyZWF0ZU9wdGlvbnMob3BlcmF0aW9ucyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB1cmkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE9wdGlvbiAndXJpJyBpcyBhIGZ1bmN0aW9uLCBzaG91bGQgYmUgYSBzdHJpbmdgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlcTogUmVxdWVzdCA9IHtcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgdXJsOiB1cmksXG4gICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgc3ViID0gZmV0Y2gocmVxLCB0aGlzLmh0dHBDbGllbnQsICgpID0+IHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnRmlsZSB1cGxvYWQgaXMgbm90IGF2YWlsYWJsZSB3aGVuIGNvbWJpbmVkIHdpdGggQmF0Y2hpbmcnLFxuICAgICAgICAgICk7XG4gICAgICAgIH0pLnN1YnNjcmliZSh7XG4gICAgICAgICAgbmV4dDogKHJlc3VsdCkgPT4gb2JzZXJ2ZXIubmV4dChyZXN1bHQuYm9keSksXG4gICAgICAgICAgZXJyb3I6IChlcnIpID0+IG9ic2VydmVyLmVycm9yKGVyciksXG4gICAgICAgICAgY29tcGxldGU6ICgpID0+IG9ic2VydmVyLmNvbXBsZXRlKCksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgaWYgKCFzdWIuY2xvc2VkKSB7XG4gICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgYmF0Y2hLZXkgPVxuICAgICAgb3B0aW9ucy5iYXRjaEtleSB8fFxuICAgICAgKChvcGVyYXRpb246IE9wZXJhdGlvbikgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVCYXRjaEtleShvcGVyYXRpb24pO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLmJhdGNoZXIgPSBuZXcgQmF0Y2hMaW5rKHtcbiAgICAgIGJhdGNoSW50ZXJ2YWw6IHRoaXMuYmF0Y2hJbnRlcnZhbCxcbiAgICAgIGJhdGNoTWF4OiB0aGlzLmJhdGNoTWF4LFxuICAgICAgYmF0Y2hLZXksXG4gICAgICBiYXRjaEhhbmRsZXIsXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZU9wdGlvbnMob3BlcmF0aW9uczogT3BlcmF0aW9uW10pOiBPcHRpb25zIHtcbiAgICBjb25zdCBjb250ZXh0OiBDb250ZXh0ID0gb3BlcmF0aW9uc1swXS5nZXRDb250ZXh0KCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbWV0aG9kOiBwcmlvcml0aXplKGNvbnRleHQubWV0aG9kLCB0aGlzLm9wdGlvbnMubWV0aG9kLCBkZWZhdWx0cy5tZXRob2QpLFxuICAgICAgdXJpOiBwcmlvcml0aXplKGNvbnRleHQudXJpLCB0aGlzLm9wdGlvbnMudXJpLCBkZWZhdWx0cy51cmkpLFxuICAgICAgd2l0aENyZWRlbnRpYWxzOiBwcmlvcml0aXplKFxuICAgICAgICBjb250ZXh0LndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgdGhpcy5vcHRpb25zLndpdGhDcmVkZW50aWFscyxcbiAgICAgICksXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlQm9keShvcGVyYXRpb25zOiBPcGVyYXRpb25bXSk6IEJvZHlbXSB7XG4gICAgcmV0dXJuIG9wZXJhdGlvbnMubWFwKChvcGVyYXRpb24pID0+IHtcbiAgICAgIGNvbnN0IGluY2x1ZGVFeHRlbnNpb25zID0gcHJpb3JpdGl6ZShcbiAgICAgICAgb3BlcmF0aW9uLmdldENvbnRleHQoKS5pbmNsdWRlRXh0ZW5zaW9ucyxcbiAgICAgICAgdGhpcy5vcHRpb25zLmluY2x1ZGVFeHRlbnNpb25zLFxuICAgICAgICBmYWxzZSxcbiAgICAgICk7XG4gICAgICBjb25zdCBpbmNsdWRlUXVlcnkgPSBwcmlvcml0aXplKFxuICAgICAgICBvcGVyYXRpb24uZ2V0Q29udGV4dCgpLmluY2x1ZGVRdWVyeSxcbiAgICAgICAgdGhpcy5vcHRpb25zLmluY2x1ZGVRdWVyeSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGJvZHk6IEJvZHkgPSB7XG4gICAgICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbi5vcGVyYXRpb25OYW1lLFxuICAgICAgICB2YXJpYWJsZXM6IG9wZXJhdGlvbi52YXJpYWJsZXMsXG4gICAgICB9O1xuXG4gICAgICBpZiAoaW5jbHVkZUV4dGVuc2lvbnMpIHtcbiAgICAgICAgYm9keS5leHRlbnNpb25zID0gb3BlcmF0aW9uLmV4dGVuc2lvbnM7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmNsdWRlUXVlcnkpIHtcbiAgICAgICAgYm9keS5xdWVyeSA9IHRoaXMucHJpbnQob3BlcmF0aW9uLnF1ZXJ5KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUhlYWRlcnMob3BlcmF0aW9uczogT3BlcmF0aW9uW10pOiBIdHRwSGVhZGVycyB7XG4gICAgcmV0dXJuIG9wZXJhdGlvbnMucmVkdWNlKFxuICAgICAgKGhlYWRlcnM6IEh0dHBIZWFkZXJzLCBvcGVyYXRpb246IE9wZXJhdGlvbikgPT4ge1xuICAgICAgICByZXR1cm4gbWVyZ2VIZWFkZXJzKGhlYWRlcnMsIG9wZXJhdGlvbi5nZXRDb250ZXh0KCkuaGVhZGVycyk7XG4gICAgICB9LFxuICAgICAgY3JlYXRlSGVhZGVyc1dpdGhDbGllbnRBd2VyZW5lc3Moe1xuICAgICAgICBoZWFkZXJzOiB0aGlzLm9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgY2xpZW50QXdhcmVuZXNzOiBvcGVyYXRpb25zWzBdPy5nZXRDb250ZXh0KCk/LmNsaWVudEF3YXJlbmVzcyxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUJhdGNoS2V5KG9wZXJhdGlvbjogT3BlcmF0aW9uKTogc3RyaW5nIHtcbiAgICBjb25zdCBjb250ZXh0OiBDb250ZXh0ICYge3NraXBCYXRjaGluZz86IGJvb2xlYW59ID0gb3BlcmF0aW9uLmdldENvbnRleHQoKTtcblxuICAgIGlmIChjb250ZXh0LnNraXBCYXRjaGluZykge1xuICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KTtcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkZXJzID1cbiAgICAgIGNvbnRleHQuaGVhZGVycyAmJlxuICAgICAgY29udGV4dC5oZWFkZXJzLmtleXMoKS5tYXAoKGs6IHN0cmluZykgPT4gY29udGV4dC5oZWFkZXJzLmdldChrKSk7XG5cbiAgICBjb25zdCBvcHRzID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgaW5jbHVkZVF1ZXJ5OiBjb250ZXh0LmluY2x1ZGVRdWVyeSxcbiAgICAgIGluY2x1ZGVFeHRlbnNpb25zOiBjb250ZXh0LmluY2x1ZGVFeHRlbnNpb25zLFxuICAgICAgaGVhZGVycyxcbiAgICB9KTtcblxuICAgIHJldHVybiBwcmlvcml0aXplKGNvbnRleHQudXJpLCB0aGlzLm9wdGlvbnMudXJpKSArIG9wdHM7XG4gIH1cblxuICBwdWJsaWMgcmVxdWVzdChvcDogT3BlcmF0aW9uKTogTGlua09ic2VydmFibGU8RmV0Y2hSZXN1bHQ+IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuYmF0Y2hlci5yZXF1ZXN0KG9wKTtcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSHR0cEJhdGNoTGluayB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge31cblxuICBwdWJsaWMgY3JlYXRlKG9wdGlvbnM6IEJhdGNoT3B0aW9ucyk6IEh0dHBCYXRjaExpbmtIYW5kbGVyIHtcbiAgICByZXR1cm4gbmV3IEh0dHBCYXRjaExpbmtIYW5kbGVyKHRoaXMuaHR0cENsaWVudCwgb3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==